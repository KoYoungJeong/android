apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.google.gms.google-services'

apply plugin: 'android-apt'     // Android-Annotation
apply plugin: 'me.tatarka.retrolambda'  //RetroLamda
apply from: 'valid.gradle'       // Gradle Propertie Valid Check
apply from: 'scripts/resources/strings/string-resource-crawler.gradle'
apply from: 'scripts/resources/images/image-resource-crawler.gradle'
apply from: 'apk-name-changer.gradle'

configurations {
    apt
}

apply plugin: 'checkstyle'
apply plugin: 'pmd'

task pmd(type: Pmd) {

    source 'src/main'
    include '**/*.java'
//    exclude('**/*Test.java')

    ruleSetFiles = files('../pmd.xml')
    ignoreFailures = true

}

task checkstyles(type: Checkstyle) {

    configFile file('../checkstyle.xml')
    source('src/main')
    include '**/*.java'
//    exclude('**/*Test.java')
    classpath = files()


    showViolations = true
    ignoreFailures = true

}

task resourceRefresh
resourceRefresh.dependsOn(stringResourceRefresh, imageResourceRefresh)

checkstyle {
    toolVersion = "6.2"
}

def supportLibVersion = "23.1.1"
def playServiceVersion = "7.0.0"
def dexmakerVersion = "1.4"
def androidAnnotationsVersion = "3.3.2"
def butterKnifeVersion = "7.0.1"
def dagger2Version="2.0.2"

dependencies {

    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        flatDir {
            dirs 'aarLibs'
        }
    }

    compile(name: 'photoview-expand-release_2015_1118_1108', ext: 'aar')
    compile(name: 'sprinkler-android-release_2016_0120_1510', ext: 'aar')
    compile(name: 'android-image-zoom-crop-release_2016_0202_1747', ext: 'aar')

//    compile project(':sprinkler-android')
//    compile project(':photoview-expand')

    apt "org.androidannotations:androidannotations:${androidAnnotationsVersion}"
    compile "org.androidannotations:androidannotations-api:${androidAnnotationsVersion}"
    compile "com.jakewharton:butterknife:${butterKnifeVersion}"

    apt "com.google.dagger:dagger-compiler:${dagger2Version}"
    compile "com.google.dagger:dagger:${dagger2Version}"
    provided 'javax.annotation:jsr250-api:1.0'

    compile 'com.android.support:multidex:1.0.0'
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Google
    compile "com.google.android.gms:play-services-analytics:${playServiceVersion}"
    compile "com.google.android.gms:play-services-gcm:${playServiceVersion}"
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:support-v4:${supportLibVersion}"
    compile "com.android.support:support-v13:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:support-annotations:${supportLibVersion}"

    // UI
    compile 'com.github.johnpersano:supertoasts:1.3.4@aar'
    compile 'com.eowise:recyclerview-stickyheaders:0.5.2@aar'
    compile 'com.soundcloud.android:android-crop:1.0.0@aar'

    // BadgeCount
    compile 'me.leolin:ShortcutBadger:1.1.3@aar'
    // Boilerplate
    compile 'de.greenrobot:eventbus:2.4.+'
    // Network
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.+'
    compile('io.socket:socket.io-client:0.6.2') {
        exclude group: 'org.json', module: 'json'
    }

    // Cache
    compile 'com.koushikdutta.ion:ion:2.1.+'
    compile 'com.facebook.fresco:fresco:0.8.0+'

    // Sliqte ORM
    compile 'com.j256.ormlite:ormlite-android:4.+'

    // Analytics & report
    compile 'com.mixpanel.android:mixpanel-android:4.5.0@aar'
//    compile 'com.parse.bolts:bolts-android:1.2.1'
    compile 'com.parse:parse-android:1.10.0'
    // RxJava
    compile 'io.reactivex:rxandroid:1.0.+'

    // facebook SDK
    compile 'com.facebook.android:facebook-android-sdk:4.5.+'

    // Force usage of support annotations in the test app, since it is internally used by the runner module.
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.1'
    androidTestCompile "com.crittercism.dexmaker:dexmaker-mockito:${dexmakerVersion}"
    androidTestCompile "com.crittercism.dexmaker:dexmaker-dx:${dexmakerVersion}"
    androidTestCompile 'com.jayway.awaitility:awaitility:1.7.+'

    androidTestCompile 'com.jayway.awaitility:awaitility:1.6.5'

    compile('com.crashlytics.sdk.android:crashlytics:2.4.0@aar') {
        transitive = true;
    }

    // newrelic
    compile 'com.newrelic.agent.android:android-agent:4.273.4'

    //Retrofit
    compile 'com.squareup.retrofit:retrofit:1.9.0'

    //OKHTTP
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'

    //LeakCanary
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.3.1'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.3.1'
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.1'

    defaultConfig {
        applicationId 'com.tosslab.jandi.app'
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 123
        versionName '1.9.1'

        // for Ui Testing
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // Enabling multidex support.
        multiDexEnabled true
    }
    buildTypes {

        debug {
            debuggable true
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

    }
    productFlavors {
        full {     // release version
//            proguardFile 'proguard-rules.txt'
        }
        dev {       // demo version
            applicationId 'com.tosslab.jandi.app.dev'
            versionName(defaultConfig.versionName + ".dev." + inhouse_version)
            minSdkVersion 21
        }

        qa {       // demo version
            applicationId 'com.tosslab.jandi.app.dev'
            versionName(defaultConfig.versionName + ".qa." + inhouse_version)
        }

        inhouse {
            versionName(defaultConfig.versionName + "." + inhouse_version)
            buildTypes {
            }
        }

    }

    sourceSets {
        inhouse {
            java.srcDirs = ['src/full/java']
        }

        qa {
            java.srcDirs = ['src/dev/java']
            res.srcDirs = ['src/dev/res']
        }

        main.res.srcDirs += 'src/main/res-crawrer'
    }

    packagingOptions.excludes = [
            'META-INF/DEPENDENCIES',
            'META-INF/LICENSE',
            'META-INF/LICENSE.txt',
            'LICENSE.txt',
            'LICENSE',
            'META-INF/license.txt',
            'META-INF/NOTICE',
            'NOTICE',
            'asm-license.txt',
            'META-INF/NOTICE.txt',
            'META-INF/notice.txt',
            'META-INF/ASL2.0'
    ]

    signingConfigs {
        release {
            storeFile file("keystore/tossandroid.keystore")
            keyAlias "tosskeystore"
            storePassword "Xhtmfoq23@#"
            keyPassword "Xhtmfoq23@#"
        }
        debug {
            storeFile file("keystore/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    jacoco {
        version = '0.7.2.201409121644'
    }

    dexOptions {
        javaMaxHeapSize "2048M"
        incremental true
    }

    testOptions {

    }

    configurations.all {
        resolutionStrategy {
            force 'com.android.support:support-annotations:23.0.1'
        }
    }
}

project.gradle.taskGraph.whenReady {
    connectedDevDebugAndroidTest {
        ignoreFailures = true
    }
}

apt {
    arguments {
        resourcePackageName android.defaultConfig.applicationId
        androidManifestFile variant.outputs[0].processResources.manifestFile
    }
}

retrolambda {
    javaVersion JavaVersion.VERSION_1_7
}

// It references by http://chrisjenx.com/gradle-robolectric-jacoco-dagger
apply plugin: "jacoco"

def coverageSourceDirs = [
        'src/main/java'
]

// This differs per what flavors buildTypes etc.
// But this example shows the 'testDebug'
// which is standard for Robolectric
task jacocoTestReport(type: JacocoReport, dependsOn: "testDevDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    // class R is used, but usage will not be covered, so ignore this class from report
    // This differs per plugin version (0.10 -> 0.11)
    // have very different fileTrees.
    // I have added rules to Ignore Dagger/Butterknife
    classDirectories = fileTree(
            dir: 'build/intermediates/classes/dev/debug',
            excludes: ['**/R.class',
                       '**/*Presenter*.class',
                       '**/*ViewModel*.class',
                       '**/*_*.class',
                       '**/android/support/v7/appcompat/*.class',
                       '**/com/github/johnpersano/supertoasts/*.class',
                       '**/com/google/android/gms/*.class',
                       '**/com/mixpanel/android/*.class',
                       '**/se/emilsjolander/stickylistheaders/*.class'])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDevDebug.exec')
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File('app/build/intermediates/classes/dev').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }

    afterEvaluate {
        // just clean up coveralls dashboard, following reports are not of interest
        testDevDebugUnitTest.reports.junitXml.enabled = false
    }
}
