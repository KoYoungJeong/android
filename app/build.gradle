apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

apply plugin: 'android-apt'     // Android-Annotation
apply plugin: 'me.tatarka.retrolambda'  //RetroLamda
apply from: 'valid.gradle'       // Gradle Propertie Valid Check
apply from: 'scripts/resources/strings/string-resource-crawler.gradle'
apply from: 'scripts/resources/images/image-resource-crawler.gradle'
apply from: 'apk-copy.gradle'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply from: 'ci-tasks.gradle'
//apply plugin: 'realm-android'
//apply from: 'test-coverage.gradle'

configurations {
    apt
}


task resourceRefresh
resourceRefresh.dependsOn(stringResourceRefresh, imageResourceRefresh)

checkstyle {
    toolVersion = "6.2"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.tosslab.jandi.app'
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 290
        versionName '2.10.1'

        // for Ui Testing
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        // Enabling multidex support.
        multiDexEnabled true
    }
    buildTypes {

        debug {
            debuggable true
            testCoverageEnabled = project.hasProperty("report_coverage") && report_coverage.toBoolean()
        }

        release {
        }

    }
    productFlavors {
        full {     // release version
//            proguardFile 'proguard-rules.txt'
        }
        dev {       // demo version
            applicationId 'com.tosslab.jandi.app.dev'
            versionName(defaultConfig.versionName + ".dev." + inhouse_version)
            minSdkVersion project.hasProperty("dev_min_sdk") ? dev_min_sdk : 21
        }
        api {
            applicationId 'com.tosslab.jandi.app.dev'
            versionName(defaultConfig.versionName + ".api." + inhouse_version)
        }

        qa {       // demo version
            applicationId 'com.tosslab.jandi.app.dev'
            versionName(defaultConfig.versionName + ".qa." + inhouse_version)
        }

        inhouse {
            versionName(defaultConfig.versionName + "." + inhouse_version)
            buildTypes {
            }
        }

    }

    sourceSets {
        inhouse {
            java.srcDirs = ['src/full/java']
        }

        qa {
            java.srcDirs = ['src/dev/java']
            res.srcDirs = ['src/dev/res']
        }

        api {
            java.srcDirs = ['src/dev/java']
            res.srcDirs = ['src/dev/res']
        }

        main.res.srcDirs += 'src/main/res-crawrer'
        main.res.srcDirs += 'src/main/res-anim'
        main.java.srcDirs += 'src/main/java-push'
    }

    // api 는 release 를 막는다
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release')
                && (variant.getFlavors().get(0).name.equals('api')
                || variant.getFlavors().get(0).name.equals('qa')
                || variant.getFlavors().get(0).name.equals('dev'))) {
            variant.setIgnore(true);
        }
    }
    applicationVariants.all { variant ->
        variant.resValue "string", "jandi_file_authority", "${variant.applicationId}.jandifile"
    }

    packagingOptions.excludes = [
            'META-INF/DEPENDENCIES',
            'META-INF/LICENSE',
            'META-INF/LICENSE.txt',
            'LICENSE.txt',
            'LICENSE',
            'META-INF/license.txt',
            'META-INF/NOTICE',
            'NOTICE',
            'asm-license.txt',
            '.readme',
            'META-INF/NOTICE.txt',
            'META-INF/notice.txt',
            'META-INF/ASL2.0',
            'META-INF/maven/com.google.guava/guava/pom.properties',
            'META-INF/maven/com.google.guava/guava/pom.xml'
    ]

    signingConfigs {
        release {
            storeFile file("keystore/tossandroid.keystore")
            keyAlias "tosskeystore"
            storePassword "Xhtmfoq23@#"
            keyPassword "Xhtmfoq23@#"
        }
        debug {
            storeFile file("keystore/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        javaMaxHeapSize "2g"
        maxProcessCount Math.max(1, ((int) (Runtime.getRuntime().availableProcessors() / 2)))
    }

    configurations.all {
        resolutionStrategy {
            force rootProject.ext.dependecies.libraries.support_annotation
        }
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
    buildToolsVersion '25.0.0'
}

project.gradle.taskGraph.whenReady {
    connectedDevDebugAndroidTest {
        ignoreFailures = true
    }
    testApiDebugUnitTest {
        ignoreFailures = true
    }
}



apt {
    arguments {
        "dart.henson.package" android.defaultConfig.applicationId
//        resourcePackageName android.defaultConfig.applicationId
//        if (variant.outputs.size() > 0) {
//            androidManifestFile variant.outputs[0].processResources.manifestFile
//        }
    }
}

retrolambda {
    javaVersion JavaVersion.VERSION_1_7
}

apply plugin: 'com.getkeepsafe.dexcount'
